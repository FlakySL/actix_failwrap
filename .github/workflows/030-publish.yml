# This action will keep track of the current crate verision, the last
# pushed git tag and determine whether the project should be deployed
#
# Additionally it will keep track whether THE LAST TAG has a release
# assigned, if it doesn't unless otherwise specified it will attempt
# to create one.

name: publish

on:
  workflow_run:
    workflows:
      - tests
    types:
      - completed

jobs:
  publish:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    permissions:
      contents: write

    steps:
      - name: Set Up Environment
        uses: actions/checkout@v4
        uses: actions-rust-lang/setup-rust-toolchain@v1
        uses: actions/setup-node@v4
        with:
          # checkout
          fetch-depth: 0

          # rust
          toolchain: stable
        run: |
          # checkout
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # node
          npm install -g semver


      - name: Get And Parse Repository Versions
        id: versions
        run: |
          # The version of the main crate which should be the first on the list in the workspace config.
          echo "crate_version=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')" \
            >> $GITHUB_OUTPUT;

          # The last pushed git tag if any.
          last_git_tag="$(git describe --tags --abbrev=0 || echo '')";
          if [[ -z "$last_git_tag" ]]; then exit 0; fi;
          echo "last_tag=$last_git_tag" >> $GITHUB_OUTPUT;


      - name: Determine What Should Be Done
        id: to_do
        run: |
          crate_version="${{ steps.versions.outputs.crate_version }}";
          last_tag="${{ steps.verrsions.outputs.last_tag }}";

          if [ -z "$last_tag" ]; then
            last_tag="0.0.0"
          fi

          # Whether the crate should be published to crates.io
          if semver -r "> $last_tag" "$crate_version"; then
            echo "should_publish='true'" >> $GITHUB_OUTPUT
          else
            echo "should_publish='false'" >> $GITHUB_OUTPUT
          fi

          # Whether the last git tag has a release associated to it.
          if ! gh release view "$last_tag" >/dev/null 2>&1; then
            echo "should_release=true" >> $GITHUB_OUTPUT;
          else
            echo "should_release=false" >> $GITHUB_OUTPUT;
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - name: Publish And Create A New Tag
        if: steps.to_to.outputs.should_publish == 'true'
        run: |
          cargo publish;

          # If cargo publish fails a new release won't be made.
          # Make sure that it exits in case github actions doesn't halt.
          if ! $?; then exit 1; fi

          git tag ${{ steps.crate_version.outputs.version }};
          git push origin ${{ steps.crate_version.outputs.version }};
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - name: Generate a changelog
        uses: orhun/git-cliff-action@v4
        if: steps.release_check.outputs.exists == 'false'
        id: git-cliff
        with:
          config: cliff.toml
          args: --verbose --latest --strip header

      - name: Create Release
        uses: actions/create-release@v1
        if: steps.release_check.outputs.exists == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.latest_tag.outputs.tag }}
          release_name: Release ${{ steps.crate_version.outputs.version }}
          body: ${{ steps.git-cliff.outputs.content }}
          draft: false
          prerelease: false
