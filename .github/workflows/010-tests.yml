# This workflow decides whether a new version should be published,
# basically by running tests, lints and version checks to ensure
# everything is as it should be.
#
# This will fail in case
# - Any of the past commits don't follow the conventional commits standard.
# - Cargo Clippy reports a broken rule.
# - Cargo Fmt reports a broken rule.
# - Tests fail
# - Code coverage reports < 80% coverage.
#
# For now this only runs on main and on linux, since this is a library,
# once further standards are enforced this might change.

name: tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  tests:
    runs-on: ubuntu-latest
    permissions:
      actions: read

    steps:
      - name: Setup Environment
        uses: ./.github/actions/setup
        with:
          rust-toolchain: nightly
          rust-components: llvm-tools-preview
          rust-packages: cargo-llvm-cov

      - name: Run Commit Linting Checks


      - name: Run Code Linting Checks
        run: |
          cargo clippy --all
          cargo fmt --all --check


      - name: Generate coverage and get percentage
        id: coverage
        run: |
          export PATH="$HOME/.cargo/bin:$PATH"
          set -o pipefail
          coverage="$(make coverage export="./coverage.lcov" | grep "^coverage=" | head -n1 | cut -d '=' -f 2)";
          echo "coverage_percentage=${coverage%\%}" >> $GITHUB_OUTPUT;
          echo "Detected coverage: ${coverage}";

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        if: github.ref == 'refs/heads/main'
        with:
          file: coverage.lcov
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: FlakySL/actix_failwrap
          verbose: true

      - name: Fail if overall coverage is below 80%
        run: |
          if (( $(echo "${{ steps.coverage.outputs.coverage_percentage }} < 80" | bc -l) )); then
            echo "❌ Coverage is below 80% (${{ steps.coverage.outputs.coverage_percentage }}%)"
            exit 1
          else
            echo "✅ Coverage meets requirement (${{ steps.coverage.outputs.coverage_percentage }}%)"
          fi
